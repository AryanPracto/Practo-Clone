// Ensure Babel is registered first (if using Babel on the server)
require("ignore-styles"); 
require('./babel-register.js');

const express = require('express');
const React = require('react');
const ReactDOMServer = require('react-dom/server');
const path = require('path');
require('dotenv').config();
const {sequelize}=require('./config/db.js');
const cors=require('cors')
const inserRoute=require('./routes/insertRoute.js')
const getRoute=require('./routes/getRoute.js')

// Import your root React component (e.g., App)
const Home = require('../frontend/src/pages/Home/Home.jsx').default;
const List=require('../frontend/src/pages/List/List.jsx').default

const app = express();
app.use(express.json());
app.use(cors());

// Serve static files from the build directory (generated by Webpack)
app.use(express.static(path.join(__dirname, '../frontend/build')));

app.get('/', (req, res) => {
  // Server-side render your App component into a string.
  const content = ReactDOMServer.renderToString(React.createElement(Home));

  // Send an HTML page that includes the SSR output and a script tag for the bundle
  res.send(`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Your Practo Clone</title>
    <link rel="stylesheet" href="/styles.css">
  </head>
  <body>
    <div id="root">${content}</div>
    <script src="/bundle.js"></script>
  </body>
</html>`);
});

app.get('/list', (req, res) => {
  // Server-side render the List component
  const content = ReactDOMServer.renderToString(React.createElement(List));

  res.send(`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>List Page</title>
    <link rel="stylesheet" href="/styles.css">
  </head>
  <body>
    <div id="root">${content}</div>
    <script src="/bundle.js"></script>
  </body>
</html>`);
});

app.use('/api/v1/insert',inserRoute);
app.use('/api/v1/get',getRoute);


sequelize
  .authenticate()
  .then(() => {
    console.log("Database connected successfully");

    // Sync models with alter: true
    return sequelize.sync({ alter: true });
  })
  .then(() => {
    console.log("Database synced with alter: true");

    // Start the server
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  })
  .catch((err) => {
    console.error("Error connecting to database:", err);
  });
